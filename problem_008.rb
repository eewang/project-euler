# PROBLEM NUMBER 8

# PROBLEM NAME
# Largest product in a series

# PROBLEM DESCRIPTION

# Find the greatest product of five consecutive digits in the 1000-digit number.
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# PROCESS
# => Convert Fixnum to String to Array
# => Go through first five numbers and find the product
# => Save the result in a "result" variable
# => Remove the first number (1) (unshift) and add the 6th number (push)
# => Find the product of the second set of 5 numbers
# => If the result is larger than the value of "result", replace the result value. Otherwise, discard the latest result
# => Repeat steps 3 to 5 until the end

# => With each number that is removed and added, check if the number being added is greater than the number being removed. If so, calculate the product.

# ANSWER

# => 40824

require 'pry'

# => METHOD 1

# num = 4938294829384

# num_array = num.to_s.split("").collect { |i| i.to_i }
# iterations = num_array.length - 5

# start = 0
# finish = 4
# product_array = []
# max_product = 0

# (0..iterations).each do |i|
#   sub_array = (start..finish).collect { |n| num_array[n] }
#   product = sub_array.inject(1) { |result, num| result * num }
#   product_array << product
#   if product > max_product
#     max_product = product
#   end
#   start += 1
#   finish += 1
# end

# => METHOD 2

# num = "73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450"

# num_array = num.split("").collect { |i| i.to_i }
# iterations = num_array.length - 5

# start = 0
# finish = 4
# product_array = []
# max_product = 0

# (0..iterations).each do |i|
#   sub_array = (start..finish).collect { |n| num_array[n] }
#   product = sub_array.inject(1) { |result, num| result * num }
#   product_array << product
#   if product > max_product
#     max_product = product
#   end
#   start += 1
#   finish += 1
# end

# => METHOD 3 (Object Orientation)

num = "73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"

class Product
  attr_accessor :number, :set, :start, :finish, :max_product, :product_array

  def initialize(set)
    @set = set
    @start = 0
    @finish = set - 1
    @max_product = 0
    @product_array = []
  end

  def create_array
    self.number.split("").collect { |i| i.to_i }
  end

  def iteration_count
    self.create_array.length - self.set
  end

  def find_max_product
    (0..self.iteration_count).each do |i|
      sub_array = (self.start..self.finish).collect { |n| self.create_array[n] }
      product = sub_array.inject(1) { |result, num| result * num }
      self.max_product = product if self.max_product_compare(product)
      self.start += 1
      self.finish += 1
    end
    max_product
  end

  def max_product_compare(num)
    true if num > self.max_product
  end

end

p = Product.new(5)
p.number = num
p.find_max_product

binding.pry




